import xarray as xr
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.impute import SimpleImputer

# Step 1: Load and preprocess the data
file_paths = ['nc_soubory/0.nc', 'nc_soubory/1.nc']

# Load and preprocess the data without chunking
data = xr.open_mfdataset(file_paths, combine='nested', concat_dim='id_measurement', chunks=None)
data.load()

# Convert to pandas DataFrame for easier manipulation
df = data.to_dataframe().reset_index()

# Print the DataFrame columns to debug
print("DataFrame columns:", df.columns)

# Handle NaN values in the raw_TS variable and other columns
imputer = SimpleImputer(strategy='mean')
df_imputed = pd.DataFrame(imputer.fit_transform(df), columns=df.columns)

# Step 2: Feature selection and target
features = df_imputed.drop(columns=['id_measurement', 'Te'])
target = df_imputed['Te']

# Step 3: Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.2, random_state=42)

# Step 4: Scale the features
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Step 5: Train a model
model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train_scaled, y_train)

# Step 6: Evaluate the model
y_pred = model.predict(X_test_scaled)
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f"Mean Squared Error on test set: {mse}")
print(f"R-squared score on test set: {r2}")

# Step 7: Plot the actual vs predicted temperatures
plt.figure(figsize=(10, 6))
plt.scatter(y_test, y_pred, alpha=0.7, color='blue', label='Predicted vs Actual')
plt.plot([min(y_test), max(y_test)], [min(y_test), max(y_test)], color='red', linestyle='--', label='Ideal Fit')
plt.title('Predicted vs Actual Plasma Temperatures')
plt.xlabel('Actual Temperature (Te)')
plt.ylabel('Predicted Temperature (Te)')
plt.legend()
plt.grid(True)
plt.show()

# Step 8: Feature importance
feature_importance = pd.DataFrame({'feature': features.columns, 'importance': model.feature_importances_})
feature_importance = feature_importance.sort_values('importance', ascending=False)
print("Top 10 most important features:")
print(feature_importance.head(10))

# Step 9: Plot feature importance
plt.figure(figsize=(12, 6))
plt.bar(feature_importance['feature'][:10], feature_importance['importance'][:10])
plt.title('Top 10 Feature Importances')
plt.xlabel('Features')
plt.ylabel('Importance')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()